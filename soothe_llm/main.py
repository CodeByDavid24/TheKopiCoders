import gradio as gr  # Import Gradio for creating web interfaces
import anthropic  # Import Anthropic for Claude API interactions
import json  # Import JSON for handling configuration files
import numpy as np
import os


def load_json(filename: str) -> dict:
    """
    Load and parse a JSON file, returning an empty dict if file not found
    Args:
        filename: Name of the JSON file without extension
    Returns:
        Dict containing parsed JSON data or empty dict if file not found
    """
    try:
        with open(f'{filename}.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


# Load character data from JSON file
character = load_json('serena')

# Define the system prompt that sets up the initial game state and rules
system_prompt = f"""
You are an AI gamemaster. Your job is to create an immersive adventure for the user, {character['name']}, who is trying to achieve {character['backstory']['goals']}. {character['name']} is {character['backstory']['description']}.
The user is playing as {character['name']}, a {character['physical']['race']['name']} {character['class']['name']} living in {character['location']}.
{character['name']} experiences anxiety, with triggers including {character['anxiety_triggers']}. She copes by {character['coping_mechanism']}. Subtly weave these elements into the narrative without explicitly labeling them as anxiety or mental health issues.

{character['name']} character profile
Race: {character['physical']['race']['name']} 
Class: {character['class']['name']}

Instructions:
- Start off the game by giving a quick introduction about Serena. Use {character['name']}, {character['physical']['race']['name']}, {character['backstory']['goals']}, {character['location']}.
- Limit to only 1 paragraph 
- Incorporate the character's {character['behaviour']} and {character['anxiety_triggers']} when it is appropriate
- Allow the user to do freeform response to scenarios generated by you
- Allow the user to ask questions about {character['name']}, {character['physical']['race']['name']}, {character['backstory']['goals']}, {character['location']}, {character['coping_mechanism']}.
- Provide scenarios where it triggers {character['name']}{character['anxiety_triggers']}
- Present 4 clear options for what the player can do next. Example:
    1. Suggest Serena take a moment to practice deep breathing before entering the classroom
    2. Encourage Serena to tell the teacher she forgot her homework and needs an extension
    3. Recommend Serena skip lunch to keep studying for the afternoon test
    4. Ask Serena about her favorite class this semester
"""

# Define the consent message
consent_message = """
**Start Game - Important Information**

**Warning & Consent:**
This is a fictional story designed to help you understand anxiety. Please be aware that some of the content may depict distressing situations. **Do not replicate or engage in any harmful actions shown in the game.** If you're feeling distressed, we encourage you to seek professional help.

Your choices and input will directly shape the direction of the story. Your decisions may influence the narrative, and some of your inputs might be used within the system to enhance your experience. By starting the game, you agree to these terms.

Type 'I agree' then 'Start game' to continue.
"""

# Get API key from environment variable or use a placeholder that won't trigger detection
# To use this in production, set the CLAUDE_API_KEY environment variable:
# export CLAUDE_API_KEY=your_actual_key_here  (for Linux/Mac)
# set CLAUDE_API_KEY=your_actual_key_here     (for Windows)
CLAUDE_API_KEY = os.environ.get(
    "CLAUDE_API_KEY", "REPLACE_WITH_YOUR_API_KEY_BEFORE_RUNNING")

# Initialize Claude client - fixing the error by removing any proxy settings
try:
    claude_client = anthropic.Anthropic(api_key=CLAUDE_API_KEY)
except TypeError:
    # For older versions of the Anthropic SDK
    claude_client = anthropic.Client(api_key=CLAUDE_API_KEY)

# Initialize game state
game_state = {
    'seed': np.random.randint(0, 1000000),  # Initial seed
    'character': character,  # Store character data
    'history': [],  # Track conversation history
    'consent_given': False,  # Track whether user has given consent
    'start': None  # Will store the starting narrative
}

demo = None  # Global variable to store Gradio interface instance for restart capability

# Remove the initialize_claude_client function since we're not using it anymore


def get_initial_response():
    """Get the initial game narrative from Claude"""
    global game_state, claude_client

    if not claude_client:
        return "Claude API key is invalid. Please check the CLAUDE_API_KEY in the code."

    try:
        # Create the initial message for Claude
        # Check which version of the SDK we're using based on the client type
        if isinstance(claude_client, anthropic.Anthropic):
            # New SDK version
            response = claude_client.messages.create(
                model="claude-3.5-sonnet-20240620",  # Use an appropriate Claude model
                system=system_prompt,
                messages=[
                    {"role": "user", "content": "Start the game with a brief introduction to Serena."}
                ],
                temperature=0,
                max_tokens=1000
            )
            # Store the starting narrative
            game_state['start'] = response.content[0].text
        else:
            # Older SDK version
            response = claude_client.completion(
                prompt=f"\n\nHuman: Start the game with a brief introduction to Serena.\n\nAssistant:",
                model="claude-3.5-sonnet-20240620",
                temperature=0,
                max_tokens_to_sample=1000,
                stop_sequences=["\n\nHuman:", "\n\nAssistant:"]
            )
            # Store the starting narrative
            game_state['start'] = response.completion

        return game_state['start']
    except Exception as e:
        return f"Error communicating with Claude API: {str(e)}"


def run_action(message: str, history: list, game_state: dict) -> str:
    """
    Process player actions and generate appropriate responses
    Args:
        message: Player's input message
        history: Conversation history from Gradio (list of [user_msg, assistant_msg] pairs)
        game_state: Current state of the game
    Returns:
        String containing AI's response to player action
    """
    global claude_client

    # Check if Claude client is configured
    if not claude_client:
        return "Claude API key is invalid. Please check the CLAUDE_API_KEY in the code."

    # Check if consent has been given
    if not game_state['consent_given']:
        if message.lower() == 'i agree':
            game_state['consent_given'] = True
            return "Thank you for agreeing to the terms. Type 'start game' to begin."
        else:
            return consent_message

    # Check if this is the start of the game
    if message.lower() == 'start game':
        # If we haven't generated the start yet, do it now
        if game_state['start'] is None:
            game_state['start'] = get_initial_response()
        return game_state['start']

    try:
        # Handle different SDK versions
        if isinstance(claude_client, anthropic.Anthropic):
            # New SDK version
            # Prepare message history for Claude
            claude_messages = []

            # Add conversation history from game_state
            if len(game_state['history']) > 0 or len(history) > 0:
                for user_msg, assistant_msg in game_state['history']:
                    claude_messages.append(
                        {"role": "user", "content": user_msg})
                    claude_messages.append(
                        {"role": "assistant", "content": assistant_msg})

            # Add current message to conversation
            claude_messages.append({"role": "user", "content": message})

            # Get response from Claude API
            response = claude_client.messages.create(
                model="claude-3.5-sonnet-20240620",  # Use an appropriate Claude model
                system=system_prompt,
                messages=claude_messages,
                temperature=0,
                max_tokens=1000
            )

            # Process and store result
            result = response.content[0].text
        else:
            # Older SDK version
            # Convert history to the older Claude format
            prompt = "\n\nHuman: " + message + "\n\nAssistant:"

            response = claude_client.completion(
                prompt=prompt,
                model="claude-3.5-sonnet-20240620",
                temperature=0,
                max_tokens_to_sample=1000,
                stop_sequences=["\n\nHuman:", "\n\nAssistant:"]
            )

            result = response.completion

        game_state['history'].append((message, result))
        return result

    except Exception as e:
        return f"Error communicating with Claude API: {str(e)}"


def main_loop(message: str, history: list) -> str:
    """
    Main game loop that processes player input and returns AI responses
    Args:
        message: Player's input message
        history: Conversation history
    Returns:
        String containing AI's response
    """
    if not history:
        # First message in conversation, show consent message
        return consent_message
    return run_action(message, history, game_state)

# Remove the set_api_key function since we're not using it anymore


def start_game() -> None:
    """
    Initialize and launch the Gradio interface for the game
    """
    global demo

    # Close existing demo if it exists
    if demo is not None:
        demo.close()

    # Create game interface
    chat_interface = gr.ChatInterface(
        main_loop,
        chatbot=gr.Chatbot(
            height=500,
            placeholder="Type 'I agree' to begin",
            show_copy_button=True,
            render_markdown=True
        ),
        textbox=gr.Textbox(placeholder="Type 'I agree' to continue...",
                           container=False, scale=7),
        title="SootheAI Game",
        theme="soft",
        examples=["Listen to music", "Journal", "Continue the story"],
        cache_examples=False,
    )

    # Set the interface directly without tabs since we removed the API key tab
    demo = chat_interface

    # Launch the interface
    demo.launch(share=True, server_name="0.0.0.0", server_port=7861)


# Start the application when script is run
if __name__ == "__main__":
    start_game()
